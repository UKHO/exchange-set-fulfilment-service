parameters:
# Run functional tests.
- name: RunFunctionalTests
  type: boolean
  default: false

jobs:
- job: UnitTestsAndCodeCoverage
  workspace:
    clean: all
  displayName: Unit tests and code coverage
  steps:
    - checkout: self
      clean: true

    - script: git submodule update --init --recursive
      displayName: Restore mock submodule
      workingDirectory: '$(Build.SourcesDirectory)'

    - task: UseDotNet@2
      displayName: Use .NET SDK $(SdkVersion)
      inputs:
        packageType: sdk
        version: $(SdkVersion)

    - task: DotNetCoreCLI@2
      displayName: ".Net Core - NuGet restore test projects only"
      inputs:
        command: restore
        projects: "**/*.UnitTests.csproj"
        feedsToUse: config
        noCache: true
        nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
        workingDirectory: '$(Build.SourcesDirectory)'
        restoreDirectory: '$(Build.SourcesDirectory)\packagesForTests'

    - task: DotNetCoreCLI@2
      displayName: "Dotnet test - Perform unit tests"
      inputs:
        command: test
        projects: "**/*.UnitTests.csproj"
        arguments: '--configuration $(BuildConfiguration) --settings "$(Build.SourcesDirectory)\test.runsettings" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --no-restore'
        publishTestResults: true
        testRunTitle: UnitTests
        restoreDirectory: '$(Build.SourcesDirectory)\packagesForTests'

    - task: PowerShell@2
      displayName: "Generate code coverage report"
      inputs:
        targetType: filePath
        filePath: '$(Build.SourcesDirectory)\.azdo\pipelines\powershell\CodeCoverageReport.ps1'
        arguments: '-source "$(Build.SourcesDirectory)" -reportFolder "$(Build.ArtifactStagingDirectory)"'

    - task: PublishBuildArtifacts@1
      displayName: "Publish Code coverage"
      inputs:
        PathtoPublish: "$(Build.ArtifactStagingDirectory)/codecoveragereport"
        ArtifactName: codecoveragereport

- job: FunctionalTests
  pool: $(LinuxPool)
  displayName: 'Run functional tests'
  workspace:
    clean: all
  condition: eq('${{ parameters.RunFunctionalTests }}', true)
  steps:
    - checkout: self
      clean: true
      submodules: true
      path: s/efs

    - checkout: PrivateEfs
      clean: true
      path: s/pvtefs

    - script: |
        cp "$(Build.SourcesDirectory)/pvtefs/root3.tar.gz" "$(Build.SourcesDirectory)/efs/src/UKHO.ADDS.EFS.Builder.S100/root3.tar.gz"
        cp "$(Build.SourcesDirectory)/pvtefs/xchg-7.4.war" "$(Build.SourcesDirectory)/efs/src/UKHO.ADDS.EFS.Builder.S100/xchg-7.4.war"
      displayName: Copy S100 builder files

    - task: PowerShell@2
      displayName: 'List folders in efs/test'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Listing folders in $(Build.SourcesDirectory)/efs/test"
          Get-ChildItem -Path "$(Build.SourcesDirectory)/efs/test" -Directory | ForEach-Object { Write-Host $_.FullName }

    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(SdkVersion)'
      inputs:
        packageType: sdk
        version: $(SdkVersion)

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages for Functional Tests'
      condition: always()
      inputs:
        command: restore
        projects: '**/*UKHO.ADDS.EFS.FunctionalTests.csproj'
        feedsToUse: config
        noCache: true
        nugetConfigPath: '$(Build.SourcesDirectory)/efs/BuildNuget.config'
        workingDirectory: '$(Build.SourcesDirectory)/efs/test/UKHO.ADDS.EFS.FunctionalTests'

    - task: DotNetCoreCLI@2
      displayName: 'Run Functional Tests'
      condition: always()
      inputs:
        command: test
        projects: '**/*UKHO.ADDS.EFS.FunctionalTests.csproj'
        arguments: '--configuration Release --no-restore --logger trx'
        workingDirectory: '$(Build.SourcesDirectory)/efs/test/UKHO.ADDS.EFS.FunctionalTests'

