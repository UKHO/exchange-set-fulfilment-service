parameters:
# The name of the environment to be used in Azure DevOps.
- name: AzureDevOpsEnvironment
  type: string
# Used to generate job names and, in lower case, to select the correct var/x-deploy.yml variable file.
- name: ShortName
  type: string
# Destroy resources, rather than deploying them.
- name: DestroyResources
  type: boolean
  default: false
# Deploy the orchestrator container app.
- name: DeployOrchestrator
  type: boolean
  default: false
# Deploy the configuration container app.
- name: DeployConfiguration
  type: boolean
  default: false
# Deploy the S100 builder container app job.
- name: DeployBuilderS100
  type: boolean
  default: false
# Deploy the ADDS mock container app.
- name: DeployAddsMock
  type: boolean
  default: false
# Deploy the Redis container app.
- name: DeployRedis
  type: boolean
  default: false
# If true, additional debugging will be enabled.
- name: AdditionalDebugging
  type: boolean
  default: false
# If true, functional tests will be run after deployment.
- name: RunFunctionalTests
  type: boolean
  default: false

jobs:
- deployment: ${{ parameters.ShortName }}DeployApp
  displayName: "${{ upper(parameters.ShortName) }} - app deploy"
  environment: ${{ parameters.AzureDevOpsEnvironment }}
  pool: $(LinuxPool)
  workspace:
    clean: all
  variables:
  - template: var/${{ lower(parameters.ShortName) }}-deploy.yml
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
          clean: true
          submodules: true
          path: s/efs

        - checkout: PrivateEfs
          condition: eq('${{ parameters.DeployBuilderS100 }}', true)
          clean: true
          path: s/pvtefs

        - script: |
            cp "$(Build.SourcesDirectory)/pvtefs/root3.tar.gz" "$(Build.SourcesDirectory)/efs/src/UKHO.ADDS.EFS.Builder.S100/root3.tar.gz"
            cp "$(Build.SourcesDirectory)/pvtefs/xchg-7.3.war" "$(Build.SourcesDirectory)/efs/src/UKHO.ADDS.EFS.Builder.S100/xchg-7.3.war"
          condition: eq('${{ parameters.DeployBuilderS100 }}', true)
          displayName: Copy S100 builder files

        - download: none
  
        - script: |
            curl -fsSL https://aka.ms/install-azd.sh | bash
            azd version
            azd config set auth.useAzCliAuth "true"
          displayName: Install azd

        - task: UseDotNet@2
          displayName: Use .NET SDK $(SdkVersion)
          inputs:
            packageType: sdk
            version: $(SdkVersion)

        - ${{ if eq(parameters.DestroyResources, true) }}:

          - task: AzureCLI@2
            displayName: Destroy infrastructure
            inputs:
              azureSubscription: ${{ variables.AzureSubscription }}
              workingDirectory: $(Build.SourcesDirectory)/efs/src/UKHO.ADDS.EFS.LocalHost
              scriptType: bash
              scriptLocation: inlineScript
              ${{ if eq(parameters.AdditionalDebugging, true) }}:
                inlineScript: |
                  azd down --no-prompt --force --purge --debug
              ${{ else }}:
                inlineScript: |
                  azd down --no-prompt --force --purge
            env:
              AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              AZURE_ENV_NAME: $(AZURE_ENV_NAME)
              AZURE_LOCATION: $(AZURE_LOCATION)
              AZURE_SUBNET_RESOURCE_ID: $(AZURE_SUBNET_RESOURCE_ID)

        - ${{ else }}:

          - task: DotNetCoreCLI@2
            displayName: NuGet restore for non test projects only
            inputs:
              command: restore
              projects: |
                **/*.csproj
                !**/*Tests.csproj
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)/efs/BuildNuget.config'

          - task: AzureCLI@2
            displayName: Package application
            inputs:
              azureSubscription: ${{ variables.AzureSubscription }}
              workingDirectory: $(Build.SourcesDirectory)/efs/src/UKHO.ADDS.EFS.LocalHost
              scriptType: bash
              scriptLocation: inlineScript
              ${{ if eq(parameters.AdditionalDebugging, true) }}:
                inlineScript: |
                  azd package --no-prompt --debug
              ${{ else }}:
                inlineScript: |
                  azd package --no-prompt
            env:
              AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              AZURE_ENV_NAME: $(AZURE_ENV_NAME)
              AZURE_LOCATION: $(AZURE_LOCATION)
              AZURE_SUBNET_RESOURCE_ID: $(AZURE_SUBNET_RESOURCE_ID)

          - task: AzureCLI@2
            displayName: Provision infrastructure
            inputs:
              azureSubscription: ${{ variables.AzureSubscription }}
              workingDirectory: $(Build.SourcesDirectory)/efs/src/UKHO.ADDS.EFS.LocalHost
              scriptType: bash
              scriptLocation: inlineScript
              ${{ if eq(parameters.AdditionalDebugging, true) }}:
                inlineScript: |
                  azd provision --no-prompt --debug
              ${{ else }}:
                inlineScript: |
                  azd provision --no-prompt
            env:
              AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              AZURE_ENV_NAME: $(AZURE_ENV_NAME)
              AZURE_LOCATION: $(AZURE_LOCATION)
              AZURE_SUBNET_RESOURCE_ID: $(AZURE_SUBNET_RESOURCE_ID)

          - task: AzureCLI@2
            displayName: Run configuration seeder
            inputs:
              azureSubscription: ${{ variables.AzureSubscription }}
              workingDirectory: $(Build.SourcesDirectory)/efs/src/UKHO.ADDS.EFS.LocalHost
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "Reading azd variables..."
                while IFS='=' read -r key value; do
                    value=$(echo "$value" | sed 's/^"//' | sed 's/"$//')
                    export "$key=$value"
                done <<EOF
                $(azd env get-values)
                EOF

                if [ "${{ parameters.AdditionalDebugging }}" == "True" ]; then
                  echo "Current environment variables:"
                  echo "--------------------------------------------------------------------------------"
                  env | sort
                  echo "--------------------------------------------------------------------------------"
                fi

                sed -i "s/{{cae_domain}}/${AZURE_CONTAINER_APPS_ENVIRONMENT_DEFAULT_DOMAIN}/g" "$(Build.SourcesDirectory)/efs/config/external-service-disco.json"

                if [ "${{ parameters.AdditionalDebugging }}" == "True" ]; then
                  echo "external-service-disco.json:"
                  echo "--------------------------------------------------------------------------------"
                  cat "$(Build.SourcesDirectory)/efs/config/external-service-disco.json"
                  echo "--------------------------------------------------------------------------------"
                fi

                dotnet run --project $(Build.SourcesDirectory)/efs/config/UKHO.ADDS.Configuration.Seeder/UKHO.ADDS.Configuration.Seeder.csproj --configuration Release --no-restore -- "$(AZURE_ENV_NAME)" "$(Build.SourcesDirectory)/efs/config/configuration.json" "$(Build.SourcesDirectory)/efs/config/external-service-disco.json" "$ADDS_CON_WAS_TABLEENDPOINT"
            env:
              AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              AZURE_ENV_NAME: $(AZURE_ENV_NAME)
              AZURE_LOCATION: $(AZURE_LOCATION)
              AZURE_SUBNET_RESOURCE_ID: $(AZURE_SUBNET_RESOURCE_ID)

          - template: container-app-deploy.yml
            parameters:
              AzureSubscription: ${{ variables.AzureSubscription }}
              AppName: efs-redis
              AdditionalDebugging: ${{ parameters.AdditionalDebugging }}
              DeployApp: ${{ parameters.DeployRedis }}

          - template: container-app-deploy.yml
            parameters:
              AzureSubscription: ${{ variables.AzureSubscription }}
              AppName: adds-configuration
              AdditionalDebugging: ${{ parameters.AdditionalDebugging }}
              DeployApp: ${{ parameters.DeployConfiguration }}

          - template: container-app-deploy.yml
            parameters:
              AzureSubscription: ${{ variables.AzureSubscription }}
              AppName: adds-mocks-efs
              AdditionalDebugging: ${{ parameters.AdditionalDebugging }}
              DeployApp: ${{ parameters.DeployAddsMock }}

          - template: container-app-deploy.yml
            parameters:
              AzureSubscription: ${{ variables.AzureSubscription }}
              AppName: efs-orchestrator
              AdditionalDebugging: ${{ parameters.AdditionalDebugging }}
              DeployApp: ${{ parameters.DeployOrchestrator }}

          - template: container-app-job-deploy.yml
            parameters:
              AzureSubscription: ${{ variables.AzureSubscription }}
              AppName: efs-builder-s100
              ProjectFolder: UKHO.ADDS.EFS.Builder.S100
              AdditionalDebugging: ${{ parameters.AdditionalDebugging }}
              DeployApp: ${{ parameters.DeployBuilderS100 }}

- ${{ if eq(parameters.RunFunctionalTests, true) }}:
  - job: ${{ parameters.ShortName }}FunctionalTests
    dependsOn:
      - ${{ parameters.ShortName }}DeployApp
    #pool: $(WindowsPool)
    pool: $(LinuxPool)
    displayName: '${{ upper(parameters.ShortName) }} - functional tests'
    variables:
      - template: var/${{ lower(parameters.ShortName) }}-deploy.yml
    workspace:
      clean: all
    steps:
      - checkout: self
        clean: true
        submodules: true
        path: s/efs

      - task: UseDotNet@2
        displayName: 'Use .NET SDK $(SdkVersion)'
        inputs:
          packageType: sdk
          version: $(SdkVersion)

      - task: DotNetCoreCLI@2
        displayName: 'Restore NuGet packages for Functional Tests'
        inputs:
          command: restore
          projects: 'test/UKHO.ADDS.EFS.EndToEnd-Tests/UKHO.ADDS.EFS.EndToEnd-Tests.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Run Functional Tests'
        inputs:
          command: test
          projects: 'test/UKHO.ADDS.EFS.EndToEnd-Tests/UKHO.ADDS.EFS.EndToEnd-Tests.csproj'
          arguments: '--configuration Release --no-restore --logger trx'
          workingDirectory: $(Build.SourcesDirectory)/efs/src/UKHO.ADDS.EFS.LocalHost
