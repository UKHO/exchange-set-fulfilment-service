parameters:
# The name of the environment to be used in Azure DevOps.
- name: AzureDevOpsEnvironment
  type: string
# Used to generate job names and, in lower case, to select the correct var/x-deploy.yml variable file.
- name: ShortName
  type: string
# Deploy the orchestrator container app.
- name: DeployOrchestrator
  type: boolean
  default: false
# Deploy the S100 builder container app job.
- name: DeployBuilderS100
  type: boolean
  default: false
# Deploy the ADDS mock container app.
- name: DeployAddsMock
  type: boolean
  default: false
# Include the ADDS mock container app in the deployment.
- name: IncludeAddsMock
  type: boolean
  default: false
# Deploy the Redis container app.
- name: DeployRedis
  type: boolean
  default: false
# If true, additional debugging will be enabled.
- name: AdditionalDebugging
  type: boolean
  default: false

jobs:
- deployment: ${{ parameters.ShortName }}DeployApp
  displayName: "${{ upper(parameters.ShortName) }} - app deploy"
  environment: ${{ parameters.AzureDevOpsEnvironment }}
  pool: $(LinuxPool)
  workspace:
    clean: all
  variables:
  - template: var/${{ lower(parameters.ShortName) }}-deploy.yml
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
          clean: true
          submodules: true
          path: s/efs

        - checkout: PrivateEfs
          condition: eq('${{ parameters.DeployBuilderS100 }}', true)
          clean: true
          path: s/pvtefs

        - script: |
            cp "$(Build.SourcesDirectory)/pvtefs/root3.tar.gz" "$(Build.SourcesDirectory)/efs/src/UKHO.ADDS.EFS.Builder.S100/root3.tar.gz"
            cp "$(Build.SourcesDirectory)/pvtefs/xchg-7.4.war" "$(Build.SourcesDirectory)/efs/src/UKHO.ADDS.EFS.Builder.S100/xchg-7.4.war"
          condition: eq('${{ parameters.DeployBuilderS100 }}', true)
          displayName: Copy S100 builder files

        - download: none
  
        - script: |
            curl -fsSL https://aka.ms/install-azd.sh | bash
            azd version
            azd config set auth.useAzCliAuth "true"
          displayName: Install azd

        - task: UseDotNet@2
          displayName: Use .NET SDK $(SdkVersion)
          inputs:
            packageType: sdk
            version: $(SdkVersion)

        - task: DotNetCoreCLI@2
          displayName: NuGet restore for non test projects only
          inputs:
            command: restore
            projects: |
              **/*.csproj
              !**/*Tests.csproj
            feedsToUse: config
            noCache: true
            nugetConfigPath: '$(Build.SourcesDirectory)/efs/BuildNuget.config'

        - template: get-infrastructure-details.yml
          parameters:
            AzureSubscription: ${{ variables.AzureSubscription }}

        - task: AzureCLI@2
          displayName: Package application
          inputs:
            azureSubscription: ${{ variables.AzureSubscription }}
            workingDirectory: $(Build.SourcesDirectory)/efs/src/UKHO.ADDS.EFS.LocalHost
            scriptType: bash
            scriptLocation: inlineScript
            ${{ if eq(parameters.AdditionalDebugging, true) }}:
              inlineScript: |
                set -e
                azd package --no-prompt --debug

                echo "Current azd variables:"
                echo "--------------------------------------------------------------------------------"
                azd env get-values
                echo "--------------------------------------------------------------------------------"
            ${{ else }}:
              inlineScript: |
                azd package --no-prompt
          env:
            AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
            AZURE_ENV_NAME: $(AZURE_ENV_NAME)
            AZURE_LOCATION: $(AZURE_LOCATION)
            AZURE_SUBNET_RESOURCE_ID: $(AZURE_SUBNET_RESOURCE_ID)

        - task: AzureCLI@2
          displayName: Provision infrastructure
          inputs:
            azureSubscription: ${{ variables.AzureSubscription }}
            workingDirectory: $(Build.SourcesDirectory)/efs/src/UKHO.ADDS.EFS.LocalHost
            scriptType: bash
            scriptLocation: inlineScript
            ${{ if eq(parameters.AdditionalDebugging, true) }}:
              inlineScript: |
                set -e
                azd provision --no-prompt --debug

                echo "Current azd variables:"
                echo "--------------------------------------------------------------------------------"
                azd env get-values
                echo "--------------------------------------------------------------------------------"
            ${{ else }}:
              inlineScript: |
                azd provision --no-prompt
          env:
            AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
            AZURE_ENV_NAME: $(AZURE_ENV_NAME)
            AZURE_LOCATION: $(AZURE_LOCATION)
            AZURE_SUBNET_RESOURCE_ID: $(AZURE_SUBNET_RESOURCE_ID)
            AZURE_ADDS_ENVIRONMENT: $(AZURE_ENV_NAME)
            AZURE_EFS_RETAIN_RESOURCE_GROUP: $(AZURE_EFS_RETAIN_RESOURCE_GROUP)
            AZURE_EFS_SERVICE_IDENTITY_NAME: $(AZURE_EFS_SERVICE_IDENTITY_NAME)
            AZURE_EFS_LOG_ANALYTICS_WORKSPACE_NAME: $(AZURE_EFS_LOG_ANALYTICS_WORKSPACE_NAME)
            AZURE_EFS_CONTAINER_REGISTRY_NAME: $(AZURE_EFS_CONTAINER_REGISTRY_NAME)
            AZURE_EFS_CONTAINER_APPS_ENVIRONMENT_NAME: $(AZURE_EFS_CONTAINER_APPS_ENVIRONMENT_NAME)
            AZURE_EFS_APPLICATION_INSIGHTS_NAME: $(AZURE_EFS_APPLICATION_INSIGHTS_NAME)
            AZURE_EFS_EVENT_HUBS_NAMESPACE_NAME: $(AZURE_EFS_EVENT_HUBS_NAMESPACE_NAME)
            AZURE_EFS_APP_CONFIGURATION_NAME: $(AZURE_EFS_APP_CONFIGURATION_NAME)
            AZURE_EFS_STORAGE_ACCOUNT_NAME: $(AZURE_EFS_STORAGE_ACCOUNT_NAME)

        - task: AzureCLI@2
          displayName: Run configuration seeder
          inputs:
            azureSubscription: ${{ variables.AzureSubscription }}
            workingDirectory: $(Build.SourcesDirectory)/efs/src/UKHO.ADDS.EFS.LocalHost
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              set -e
              echo "Reading azd variables..."
              while IFS='=' read -r key value; do
                  value=$(echo "$value" | sed 's/^"//' | sed 's/"$//')
                  export "$key=$value"
              done <<EOF
              $(azd env get-values)
              EOF

              if [ "${{ parameters.AdditionalDebugging }}" == "True" ]; then
                echo "Current environment variables:"
                echo "--------------------------------------------------------------------------------"
                env | sort
                echo "--------------------------------------------------------------------------------"
              fi

              sed -i "s/{{cae_domain}}/${AZURE_CONTAINER_APPS_ENVIRONMENT_DEFAULT_DOMAIN}/g" "$(Build.SourcesDirectory)/efs/configuration/external-services.json"

              if [ "${{ parameters.AdditionalDebugging }}" == "True" ]; then
                echo "external-services.json:"
                echo "--------------------------------------------------------------------------------"
                cat "$(Build.SourcesDirectory)/efs/configuration/external-services.json"
                echo "--------------------------------------------------------------------------------"
              fi

              dotnet run --project $(Build.SourcesDirectory)/efs/configuration/UKHO.ADDS.Aspire.Configuration.Seeder/UKHO.ADDS.Aspire.Configuration.Seeder.csproj --configuration Release --no-restore -- "efs" "$(AZURE_ENV_NAME)" "$(Build.SourcesDirectory)/efs/configuration/configuration.json" "$(Build.SourcesDirectory)/efs/configuration/external-services.json" "$EFS_APPCONFIG_APPCONFIGENDPOINT"
          env:
            AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
            AZURE_ENV_NAME: $(AZURE_ENV_NAME)
            AZURE_LOCATION: $(AZURE_LOCATION)
            AZURE_SUBNET_RESOURCE_ID: $(AZURE_SUBNET_RESOURCE_ID)

        - template: container-app-deploy.yml
          parameters:
            AzureSubscription: ${{ variables.AzureSubscription }}
            AppName: efs-redis
            AdditionalDebugging: ${{ parameters.AdditionalDebugging }}
            DeployApp: ${{ parameters.DeployRedis }}

        - ${{ if eq(parameters.IncludeAddsMock, true) }}:

          - template: container-app-deploy.yml
            parameters:
              AzureSubscription: ${{ variables.AzureSubscription }}
              AppName: adds-mocks-efs
              AdditionalDebugging: ${{ parameters.AdditionalDebugging }}
              DeployApp: ${{ parameters.DeployAddsMock }}

        - template: container-app-deploy.yml
          parameters:
            AzureSubscription: ${{ variables.AzureSubscription }}
            AppName: efs-orchestrator
            AdditionalDebugging: ${{ parameters.AdditionalDebugging }}
            DeployApp: ${{ parameters.DeployOrchestrator }}

        - template: container-app-job-deploy.yml
          parameters:
            AzureSubscription: ${{ variables.AzureSubscription }}
            AppName: efs-builder-s100
            ProjectFolder: UKHO.ADDS.EFS.Builder.S100
            BuilderType: S100
            AdditionalDebugging: ${{ parameters.AdditionalDebugging }}
            DeployApp: ${{ parameters.DeployBuilderS100 }}

        - template: check-container.yml
          parameters:
            AzureSubscription: ${{ variables.AzureSubscription }}
            AppName: efs-orchestrator
            MaxWaitTime: 15

        - template: check-container.yml
          parameters:
            AzureSubscription: ${{ variables.AzureSubscription }}
            AppName: efs-redis
            MaxWaitTime: 15

        - ${{ if eq(parameters.IncludeAddsMock, true) }}:

          - template: check-container.yml
            parameters:
              AzureSubscription: ${{ variables.AzureSubscription }}
              AppName: adds-mocks-efs
              MaxWaitTime: 1

        - script: |
            DOMAIN=$(azd env get-value EFS_CAE_AZURE_CONTAINER_APPS_ENVIRONMENT_DEFAULT_DOMAIN)
            URL="https://efs-orchestrator.$DOMAIN"
            echo "Orchestrator Endpoint: $URL"
            echo "##vso[task.setvariable variable=ORCHESTRATOR_URL]$URL"
            MockURL="https://adds-mocks-efs.$DOMAIN"
            echo "Adds Mock Endpoint: $MockURL"
            echo "##vso[task.setvariable variable=ADDSMOCK_URL]$MockURL"
          displayName: 'Set Endpoint Variables'
          workingDirectory: $(Build.SourcesDirectory)/efs/src/UKHO.ADDS.EFS.LocalHost

        - task: PowerShell@2
          displayName: "Check health endpoint"
          inputs:
            targetType: filePath
            filePath: "$(Build.SourcesDirectory)/efs/.azdo/pipelines/powershell/CheckServiceStatus.ps1"
            arguments: "-healthEndPointUrl $(ORCHESTRATOR_URL)/health -waitTimeInMinute 2 -onErrorContinue 0"

        - task: DotNetCoreCLI@2
          displayName: ".Net Core - NuGet restore test projects only"
          inputs:
            command: restore
            projects: "**/UKHO.ADDS.EFS.FunctionalTests.csproj"
            feedsToUse: config
            noCache: true
            nugetConfigPath: '$(Build.SourcesDirectory)/efs/BuildNuget.config'
            workingDirectory: '$(Build.SourcesDirectory)/efs'
            restoreDirectory: '$(Build.SourcesDirectory)/efs/packagesForTests'

        - task: DotNetCoreCLI@2
          displayName: Run Functional tests
          inputs:
            command: test
            projects: "**/UKHO.ADDS.EFS.FunctionalTests.csproj"
            arguments: '--configuration $(BuildConfiguration) --settings "$(Build.SourcesDirectory)/efs/test.runsettings" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura --no-restore'
            publishTestResults: true
            testRunTitle: FunctionalTests
            restoreDirectory: '$(Build.SourcesDirectory)/efs/packagesForTests'
          env:
            ORCHESTRATOR_URL: $(ORCHESTRATOR_URL)
            ADDSMOCK_URL: $(ADDSMOCK_URL)
