parameters:
# The name of the environment to be used in Azure DevOps.
- name: AzureDevOpsEnvironment
  type: string
# Used to generate job names and, in lower case, to select the correct var/x-deploy.yml variable file.
- name: ShortName
  type: string
# Destroy resources, rather than deploying them.
- name: DestroyResources
  type: boolean
  default: false
# If true, azd commands will be run with the --debug flag.
- name: AzdDebug
  type: boolean
  default: false

jobs:
- deployment: ${{ parameters.ShortName }}DeployApp
  displayName: "${{ upper(parameters.ShortName) }} - app deploy"
  environment: ${{ parameters.AzureDevOpsEnvironment }}
  pool: $(LinuxPool)
  workspace:
    clean: all
  variables:
  - template: var/${{ lower(parameters.ShortName) }}-deploy.yml
  - name: Containers.BuildOnStartup
    value: false
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self
          clean: true

        - download: none

        - script: git submodule update --init --recursive
          displayName: Restore mock submodule
          workingDirectory: '$(Build.SourcesDirectory)'
  
        - script: |
            curl -fsSL https://aka.ms/install-azd.sh | bash
            azd version
            azd config set auth.useAzCliAuth "true"
          displayName: Install azd

        - task: UseDotNet@2
          displayName: Use .NET SDK $(SdkVersion)
          inputs:
            packageType: sdk
            version: $(SdkVersion)

        - task: FileTransform@2
          displayName: Turn off builder in host
          inputs:
            folderPath: '$(Build.SourcesDirectory)/src/UKHO.ADDS.EFS.LocalHost'
            xmlTransformationRules: ''
            enableXmlTransform: false
            jsonTargetFiles: '**/appsettings.json'

        - ${{ if eq(parameters.DestroyResources, true) }}:

          - task: AzureCLI@2
            displayName: Destroy infrastructure
            inputs:
              azureSubscription: ${{ variables.AzureSubscription }}
              scriptType: bash
              scriptLocation: inlineScript
              keepAzSessionActive: true
              ${{ if eq(parameters.AzdDebug, true) }}:
                inlineScript: |
                  azd down --no-prompt --force --purge --debug
              ${{ else }}:
                inlineScript: |
                  azd down --no-prompt --force --purge
            env:
              AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              AZURE_ENV_NAME: $(AZURE_ENV_NAME)
              AZURE_LOCATION: $(AZURE_LOCATION)
              AZURE_SUBNET_NAME: $(AZURE_SUBNET_NAME)
              AZURE_SUBNET_RESOURCE_GROUP: $(AZURE_SUBNET_RESOURCE_GROUP)
              AZURE_SUBNET_SUBSCRIPTION: $(AZURE_SUBSCRIPTION_ID)
              AZURE_SUBNET_VNET: $(AZURE_SUBNET_VNET)

        - ${{ else }}:

          - task: DotNetCoreCLI@2
            displayName: NuGet restore for non test projects only
            inputs:
              command: restore
              projects: |
                **/*.csproj
                !**/*Tests.csproj
              feedsToUse: config
              noCache: true
              nugetConfigPath: '$(Build.SourcesDirectory)/BuildNuget.config'

          - task: AzureCLI@2
            displayName: Package application
            inputs:
              azureSubscription: ${{ variables.AzureSubscription }}
              scriptType: bash
              scriptLocation: inlineScript
              keepAzSessionActive: true
              ${{ if eq(parameters.AzdDebug, true) }}:
                inlineScript: |
                  azd package --no-prompt --debug
              ${{ else }}:
                inlineScript: |
                  azd package --no-prompt
            env:
              AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              AZURE_ENV_NAME: $(AZURE_ENV_NAME)
              AZURE_LOCATION: $(AZURE_LOCATION)
              AZURE_SUBNET_NAME: $(AZURE_SUBNET_NAME)
              AZURE_SUBNET_RESOURCE_GROUP: $(AZURE_SUBNET_RESOURCE_GROUP)
              AZURE_SUBNET_SUBSCRIPTION: $(AZURE_SUBSCRIPTION_ID)
              AZURE_SUBNET_VNET: $(AZURE_SUBNET_VNET)

          - task: AzureCLI@2
            displayName: Provision infrastructure
            inputs:
              azureSubscription: ${{ variables.AzureSubscription }}
              scriptType: bash
              scriptLocation: inlineScript
              keepAzSessionActive: true
              ${{ if eq(parameters.AzdDebug, true) }}:
                inlineScript: |
                  azd provision --no-prompt --debug
              ${{ else }}:
                inlineScript: |
                  azd provision --no-prompt
            env:
              AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              AZURE_ENV_NAME: $(AZURE_ENV_NAME)
              AZURE_LOCATION: $(AZURE_LOCATION)
              AZURE_SUBNET_NAME: $(AZURE_SUBNET_NAME)
              AZURE_SUBNET_RESOURCE_GROUP: $(AZURE_SUBNET_RESOURCE_GROUP)
              AZURE_SUBNET_SUBSCRIPTION: $(AZURE_SUBSCRIPTION_ID)
              AZURE_SUBNET_VNET: $(AZURE_SUBNET_VNET)

          # - task: AzureCLI@2
          #   displayName: Deploy application
          #   inputs:
          #     azureSubscription: ${{ variables.AzureSubscription }}
          #     scriptType: bash
          #     scriptLocation: inlineScript
          #     keepAzSessionActive: true
          #     ${{ if eq(parameters.AzdDebug, true) }}:
          #       inlineScript: |
          #         azd deploy adds-configuration --no-prompt --debug
          #     ${{ else }}:
          #       inlineScript: |
          #         azd deploy adds-configuration --no-prompt
          #   env:
          #     AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
          #     AZURE_ENV_NAME: $(AZURE_ENV_NAME)
          #     AZURE_LOCATION: $(AZURE_LOCATION)
          #     AZURE_SUBNET_NAME: $(AZURE_SUBNET_NAME)
          #     AZURE_SUBNET_RESOURCE_GROUP: $(AZURE_SUBNET_RESOURCE_GROUP)
          #     AZURE_SUBNET_SUBSCRIPTION: $(AZURE_SUBSCRIPTION_ID)
          #     AZURE_SUBNET_VNET: $(AZURE_SUBNET_VNET)

          - task: AzureCLI@2
            displayName: Deploy adds-configuration
            inputs:
              azureSubscription: ${{ variables.AzureSubscription }}
              scriptType: bash
              scriptLocation: inlineScript
              keepAzSessionActive: true
              inlineScript: |
                echo "Setting variables..."
                DeploymentNumber=$EPOCHSECONDS
                export CONTAINER_IMAGE="$ACR_NAME.azurecr.io/exchange-set-fulfilment-service/adds-configuration-dev:azd-deploy-$DeploymentNumber"
                export CONTAINER_PORT=8080
                RESOURCE_GROUP="rg-$(AZURE_ENV_NAME)"
                while IFS='=' read -r key value; do
                    value=$(echo "$value" | sed 's/^"//' | sed 's/"$//')
                    export "$key=$value"
                done <<EOF
                $(azd env get-values)
                EOF

                echo "Current environment variables:"
                echo "---------------------------------------------------------------"
                env
                echo "---------------------------------------------------------------"

                echo "Logging in to Azure Container Registry..."
                az acr login --name $ACR_NAME

                echo "Publishing image..."
                dotnet publish "$(Build.SourcesDirectory)/config/repo/src/UKHO.ADDS.Configuration/UKHO.ADDS.Configuration.csproj" -r linux-x64 -c Release /t:PublishContainer -p:ContainerRepository=exchange-set-fulfilment-service/adds-configuration-dev -p:ContainerImageTag=azd-deploy-$DeploymentNumber -p:ContainerRegistry=$ACR_NAME.azurecr.io --getProperty:GeneratedContainerConfiguration

                echo "Deploying app..."
                cp "$(Build.SourcesDirectory)/src/UKHO.ADDS.EFS.LocalHost/infra/adds-configuration/adds-configuration.tmpl.bicepparam" "$(Build.SourcesDirectory)/infra/adds-configuration/adds-configuration.tmpl.bicepparam"
                cd "$(Build.SourcesDirectory)/infra/adds-configuration"
                az deployment group create --name adds-configuration-$DeploymentNumber --resource-group $RESOURCE_GROUP --parameters adds-configuration.tmpl.bicepparam --debug
            env:
              ACR_NAME: $(BuilderAcrName)
              AZURE_ENV_NAME: $(AZURE_ENV_NAME)

          - task: AzureCLI@2
            displayName: Download builder files from Azure
            inputs:
              azureSubscription: ${{ variables.AzureSubscription }}
              scriptType: bash
              scriptLocation: inlineScript
              keepAzSessionActive: true
              inlineScript: |
                az storage blob download --container-name $StorageContainerName --name root2.tar.gz --file $(Build.SourcesDirectory)/src/UKHO.ADDS.EFS.Builder.S100/root2.tar.gz --auth-mode key
                az storage blob download --container-name $StorageContainerName --name xchg-2.7.war --file $(Build.SourcesDirectory)/src/UKHO.ADDS.EFS.Builder.S100/xchg-2.7.war --auth-mode key
            env:
              AZURE_STORAGE_ACCOUNT: $(BuilderFilesSa)
              StorageContainerName: $(BuilderFilesContainer)
              AZURE_STORAGE_KEY: $(BuilderFilesSaKey)

          - task: AzureCLI@2
            displayName: Build and push Docker image to ACR
            inputs:
              azureSubscription: ${{ variables.AzureSubscription }}
              scriptType: bash
              scriptLocation: inlineScript
              keepAzSessionActive: true
              inlineScript: |
                echo "Logging in to Azure Container Registry..."
                az acr login --name $ACR_NAME

                echo "Changing directory..."
                cd $(Build.SourcesDirectory)/src

                echo "Building Docker image..."
                docker build -t $ACR_NAME.azurecr.io/exchange-set-fulfilment-service/efs-builder-s100:${BUILD_TAG} -f UKHO.ADDS.EFS.Builder.S100/Dockerfile .

                echo "Pushing Docker image to Azure Container Registry..."
                docker push $ACR_NAME.azurecr.io/exchange-set-fulfilment-service/efs-builder-s100:${BUILD_TAG}
            env:
              ACR_NAME: $(BuilderAcrName)
              BUILD_TAG: $(Build.BuildId)
