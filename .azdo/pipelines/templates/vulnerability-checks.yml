parameters:
- name: SnykOnlyFailIfFixable
  type: boolean
  default: false
- name: SnykPassOnIssues
  type: boolean
  default: false
- name: IacOnly
  type: boolean
  default: false

jobs:
- job: Snyk
  displayName: Run Snyk security scans
  pool: $(WindowsPool)
  steps:

  - ${{ if ne(parameters.IacOnly, true) }}:

    - task: UseDotNet@2
      displayName: Use .NET SDK $(SdkVersion)
      inputs:
        packageType: sdk
        version: $(SdkVersion)

    - task: DotNetCoreCLI@2
      displayName: .NET - NuGet restore
      inputs:
        command: restore
        projects: |
          **/*.csproj
        feedsToUse: config
        noCache: true
        nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
        workingDirectory: '$(Build.SourcesDirectory)'

  - pwsh: |
      mkdir "$(Agent.TempDirectory)\$(Build.BuildId)"
      az bicep build --file "$(Build.SourcesDirectory)\src\UKHO.ADDS.EFS.LocalHost\infra\main.bicep" --outfile "$(Agent.TempDirectory)\$(Build.BuildId)\main.json"
      az bicep build --file "$(Build.SourcesDirectory)\infra-retain\main.bicep" --outfile "$(Agent.TempDirectory)\$(Build.BuildId)\main-retain.json"
    displayName: Create ARM templates

  - task: UkhoSnykScanTask@0
    displayName: Snyk IaC scan
    inputs:
      failOnIssues: ${{ not(parameters.SnykPassOnIssues) }}
      failOnThreshold: high
      organization: $(snykAbzuOrganizationId)
      serviceConnectionEndpoint: Snyk
      severityThreshold: low
      testType: iac
      testDirectory: '$(Agent.TempDirectory)\$(Build.BuildId)'
      monitorwhen: never
      ${{ if eq(parameters.SnykOnlyFailIfFixable, true) }}:
        additionalArguments: --fail-on=all

  - ${{ if ne(parameters.IacOnly, true) }}:

    - task: UkhoSnykScanTask@0
      displayName: Snyk SAST scan
      condition: succeededOrFailed()
      inputs:
        failOnIssues: ${{ not(parameters.SnykPassOnIssues) }}
        failOnThreshold: high
        organization: $(snykAbzuOrganizationId)
        serviceConnectionEndpoint: Snyk
        codeSeverityThreshold: low
        testType: code
        monitorwhen: never
        ${{ if eq(parameters.SnykOnlyFailIfFixable, true) }}:
          additionalArguments: --fail-on=all

    - task: UkhoSnykScanTask@0
      displayName: Snyk SCA scan
      condition: succeededOrFailed()
      inputs:
        failOnIssues: ${{ not(parameters.SnykPassOnIssues) }}
        failOnThreshold: high
        organization: $(snykAbzuOrganizationId)
        serviceConnectionEndpoint: Snyk
        codeSeverityThreshold: low
        testType: app
        monitorwhen: never
        severityThreshold: low
        ${{ if eq(parameters.SnykOnlyFailIfFixable, true) }}:
          additionalArguments: --all-projects --fail-on=all
        ${{ else }}:
          additionalArguments: --all-projects

- job: HadoLint
  displayName: Run docker file scan
  pool: $(LinuxPool)
  steps:

  - pwsh: |
      docker pull hadolint/hadolint:latest
    displayName: Get latest hadolint

  - pwsh: |
      $dockerfilePath = "$(Build.SourcesDirectory)/src/UKHO.ADDS.EFS.Builder.S100/Dockerfile-Release"
      $workdir        = Split-Path $dockerfilePath -Parent
      $dockerfile     = Split-Path $dockerfilePath -Leaf
      docker run --rm -v "${workdir}:/workspace" -w /workspace --entrypoint /bin/hadolint hadolint/hadolint:latest $dockerfile
    displayName: Run hadolint - S100

  - pwsh: |
      cat "$(Build.SourcesDirectory)/src/UKHO.ADDS.EFS.Builder.S57\Dockerfile" | docker run --rm -i hadolint/hadolint
    displayName: Run hadolint - S57

  - pwsh: |
      cat "$(Build.SourcesDirectory)/src/UKHO.ADDS.EFS.Builder.S63\Dockerfile" | docker run --rm -i hadolint/hadolint
    displayName: Run hadolint - S63
