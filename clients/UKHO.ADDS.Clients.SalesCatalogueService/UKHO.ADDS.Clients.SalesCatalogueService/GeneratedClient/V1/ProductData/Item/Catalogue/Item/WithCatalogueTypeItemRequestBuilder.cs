// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
using UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models;
namespace UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \v1\productData\{productType}\catalogue\{catalogueType}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithCatalogueTypeItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithCatalogueTypeItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/productData/{productType}/catalogue/{catalogueType}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithCatalogueTypeItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/productData/{productType}/catalogue/{catalogueType}", rawUrl)
        {
        }
        /// <summary>
        /// Get the data for a catalogue
        /// </summary>
        /// <returns>A <see cref="global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder.WithCatalogueTypeGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.ErrorDescription">When receiving a 400 status code</exception>
        /// <exception cref="global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.DefaultErrorResponse">When receiving a 404 status code</exception>
        /// <exception cref="global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.UnsupportedMediaTypeError">When receiving a 415 status code</exception>
        /// <exception cref="global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.DefaultErrorResponse">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder.WithCatalogueTypeGetResponse?> GetAsWithCatalogueTypeGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder.WithCatalogueTypeGetResponse> GetAsWithCatalogueTypeGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.ErrorDescription.CreateFromDiscriminatorValue },
                { "404", global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.DefaultErrorResponse.CreateFromDiscriminatorValue },
                { "415", global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.UnsupportedMediaTypeError.CreateFromDiscriminatorValue },
                { "500", global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.DefaultErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder.WithCatalogueTypeGetResponse>(requestInfo, global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder.WithCatalogueTypeGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get the data for a catalogue
        /// </summary>
        /// <returns>A <see cref="global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder.WithCatalogueTypeResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.ErrorDescription">When receiving a 400 status code</exception>
        /// <exception cref="global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.DefaultErrorResponse">When receiving a 404 status code</exception>
        /// <exception cref="global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.UnsupportedMediaTypeError">When receiving a 415 status code</exception>
        /// <exception cref="global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.DefaultErrorResponse">When receiving a 500 status code</exception>
        [Obsolete("This method is obsolete. Use GetAsWithCatalogueTypeGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder.WithCatalogueTypeResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder.WithCatalogueTypeResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.ErrorDescription.CreateFromDiscriminatorValue },
                { "404", global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.DefaultErrorResponse.CreateFromDiscriminatorValue },
                { "415", global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.UnsupportedMediaTypeError.CreateFromDiscriminatorValue },
                { "500", global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.DefaultErrorResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder.WithCatalogueTypeResponse>(requestInfo, global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder.WithCatalogueTypeResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get the data for a catalogue
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes List&lt;global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember1&gt;, List&lt;global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember2&gt;
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithCatalogueTypeGetResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type List&lt;global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember1&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember1>? WithCatalogueTypeGetResponseMember1 { get; set; }
#nullable restore
#else
            public List<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember1> WithCatalogueTypeGetResponseMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type List&lt;global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember2&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember2>? WithCatalogueTypeGetResponseMember2 { get; set; }
#nullable restore
#else
            public List<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember2> WithCatalogueTypeGetResponseMember2 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder.WithCatalogueTypeGetResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder.WithCatalogueTypeGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder.WithCatalogueTypeGetResponse();
                if(parseNode.GetCollectionOfObjectValues<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember1>(global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember1.CreateFromDiscriminatorValue)?.AsList() is List<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember1> withCatalogueTypeGetResponseMember1Value)
                {
                    result.WithCatalogueTypeGetResponseMember1 = withCatalogueTypeGetResponseMember1Value;
                }
                else if(parseNode.GetCollectionOfObjectValues<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember2>(global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember2.CreateFromDiscriminatorValue)?.AsList() is List<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember2> withCatalogueTypeGetResponseMember2Value)
                {
                    result.WithCatalogueTypeGetResponseMember2 = withCatalogueTypeGetResponseMember2Value;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(WithCatalogueTypeGetResponseMember1 != null)
                {
                    writer.WriteCollectionOfObjectValues<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember1>(null, WithCatalogueTypeGetResponseMember1);
                }
                else if(WithCatalogueTypeGetResponseMember2 != null)
                {
                    writer.WriteCollectionOfObjectValues<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember2>(null, WithCatalogueTypeGetResponseMember2);
                }
            }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithCatalogueTypeItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Composed type wrapper for classes List&lt;global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember1&gt;, List&lt;global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember2&gt;
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithCatalogueTypeResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type List&lt;global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember1&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember1>? WithCatalogueTypeGetResponseMember1 { get; set; }
#nullable restore
#else
            public List<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember1> WithCatalogueTypeGetResponseMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type List&lt;global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember2&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember2>? WithCatalogueTypeGetResponseMember2 { get; set; }
#nullable restore
#else
            public List<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember2> WithCatalogueTypeGetResponseMember2 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder.WithCatalogueTypeResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder.WithCatalogueTypeResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.V1.ProductData.Item.Catalogue.Item.WithCatalogueTypeItemRequestBuilder.WithCatalogueTypeResponse();
                if(parseNode.GetCollectionOfObjectValues<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember1>(global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember1.CreateFromDiscriminatorValue)?.AsList() is List<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember1> withCatalogueTypeGetResponseMember1Value)
                {
                    result.WithCatalogueTypeGetResponseMember1 = withCatalogueTypeGetResponseMember1Value;
                }
                else if(parseNode.GetCollectionOfObjectValues<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember2>(global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember2.CreateFromDiscriminatorValue)?.AsList() is List<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember2> withCatalogueTypeGetResponseMember2Value)
                {
                    result.WithCatalogueTypeGetResponseMember2 = withCatalogueTypeGetResponseMember2Value;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(WithCatalogueTypeGetResponseMember1 != null)
                {
                    writer.WriteCollectionOfObjectValues<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember1>(null, WithCatalogueTypeGetResponseMember1);
                }
                else if(WithCatalogueTypeGetResponseMember2 != null)
                {
                    writer.WriteCollectionOfObjectValues<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.WithCatalogueTypeGetResponseMember2>(null, WithCatalogueTypeGetResponseMember2);
                }
            }
        }
    }
}
#pragma warning restore CS0618
