// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Products : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Collection of physical bundles that are associated with the latest update of this product</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.Products_bundle>? Bundle { get; set; }
#nullable restore
#else
        public List<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.Products_bundle> Bundle { get; set; }
#endif
        /// <summary>The details of the cancellation, if one exists</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.Products_cancellation? Cancellation { get; set; }
#nullable restore
#else
        public global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.Products_cancellation Cancellation { get; set; }
#endif
        /// <summary>The dates property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.Products_dates>? Dates { get; set; }
#nullable restore
#else
        public List<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.Products_dates> Dates { get; set; }
#endif
        /// <summary>The edition number</summary>
        public int? EditionNumber { get; set; }
        /// <summary>the total file size in bytes of all the files for this product</summary>
        public int? FileSize { get; set; }
        /// <summary>The unique product identifier</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProductName { get; set; }
#nullable restore
#else
        public string ProductName { get; set; }
#endif
        /// <summary>an array of update numbers</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? UpdateNumbers { get; set; }
#nullable restore
#else
        public List<int?> UpdateNumbers { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.Products"/> and sets the default values.
        /// </summary>
        public Products()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.Products"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.Products CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.Products();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bundle", n => { Bundle = n.GetCollectionOfObjectValues<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.Products_bundle>(global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.Products_bundle.CreateFromDiscriminatorValue)?.AsList(); } },
                { "cancellation", n => { Cancellation = n.GetObjectValue<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.Products_cancellation>(global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.Products_cancellation.CreateFromDiscriminatorValue); } },
                { "dates", n => { Dates = n.GetCollectionOfObjectValues<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.Products_dates>(global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.Products_dates.CreateFromDiscriminatorValue)?.AsList(); } },
                { "editionNumber", n => { EditionNumber = n.GetIntValue(); } },
                { "fileSize", n => { FileSize = n.GetIntValue(); } },
                { "productName", n => { ProductName = n.GetStringValue(); } },
                { "updateNumbers", n => { UpdateNumbers = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.Products_bundle>("bundle", Bundle);
            writer.WriteObjectValue<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.Products_cancellation>("cancellation", Cancellation);
            writer.WriteCollectionOfObjectValues<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.Products_dates>("dates", Dates);
            writer.WriteIntValue("editionNumber", EditionNumber);
            writer.WriteIntValue("fileSize", FileSize);
            writer.WriteStringValue("productName", ProductName);
            writer.WriteCollectionOfPrimitiveValues<int?>("updateNumbers", UpdateNumbers);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
