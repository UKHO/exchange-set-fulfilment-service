// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models
{
    /// <summary>
    /// Represents the count of S-100 products in the exchange set service.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class S100ProductCounts : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The number of products explicitly requested</summary>
        public int? RequestedProductCount { get; set; }
        /// <summary>The number of products that are already up to date</summary>
        public int? RequestedProductsAlreadyUpToDateCount { get; set; }
        /// <summary>Where a requested product is not included in the return, the product will be listed in the requestedProductNotReturned portion of the response along with a reason. The reason will be one of:   * productWithdrawn (the product has been withdrawn )   * invalidProduct (the product is not part of the S-100 Service, i.e. is an invalid or unknown dataset)   * noDataAvailableForCancelledProduct (the product has been cancelled, and is beyond the retention period. Cancelled cells within the retention period will be returned with the cancellation data in the exchange set)   * duplicateProduct (the product was included in the request more than once)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.S100ProductCounts_requestedProductsNotReturned>? RequestedProductsNotReturned { get; set; }
#nullable restore
#else
        public List<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.S100ProductCounts_requestedProductsNotReturned> RequestedProductsNotReturned { get; set; }
#endif
        /// <summary>The number of products that have data included in the produced exchange set</summary>
        public int? ReturnedProductCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.S100ProductCounts"/> and sets the default values.
        /// </summary>
        public S100ProductCounts()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.S100ProductCounts"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.S100ProductCounts CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.S100ProductCounts();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "requestedProductCount", n => { RequestedProductCount = n.GetIntValue(); } },
                { "requestedProductsAlreadyUpToDateCount", n => { RequestedProductsAlreadyUpToDateCount = n.GetIntValue(); } },
                { "requestedProductsNotReturned", n => { RequestedProductsNotReturned = n.GetCollectionOfObjectValues<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.S100ProductCounts_requestedProductsNotReturned>(global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.S100ProductCounts_requestedProductsNotReturned.CreateFromDiscriminatorValue)?.AsList(); } },
                { "returnedProductCount", n => { ReturnedProductCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("requestedProductCount", RequestedProductCount);
            writer.WriteIntValue("requestedProductsAlreadyUpToDateCount", RequestedProductsAlreadyUpToDateCount);
            writer.WriteCollectionOfObjectValues<global::UKHO.ADDS.Clients.Kiota.SalesCatalogueService.Models.S100ProductCounts_requestedProductsNotReturned>("requestedProductsNotReturned", RequestedProductsNotReturned);
            writer.WriteIntValue("returnedProductCount", ReturnedProductCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
